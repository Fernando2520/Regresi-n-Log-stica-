https://www.kaggle.com/shreyatiwari/ml-linear-regression(Enlace del ejemplo)

#Explicación 

La regresión logística es uno de los algoritmos de aprendizaje supervisado más sencillos y más utilizados en Máquina
Aprendizaje de para problemas de clasificación. Es un tipo de análisis de regresión que permite premizofe
el resultado de una variable categórica, (binaria o múltiple) en función de las variables independientes o predictoras.

#Codigo 

importar pandas como pd
importación numpy como np
importación statsmodels.api como sm
de sklearn.model_selection importar train_test_split
importar el mar nacido como sns
importar matplotlib.pyplot como plt
• Los archivos de datos de entrada están disponibles en el ".. /input/".
Por ejemplo, al ejecutar esto (haciendo clic en Ejecutar o presionando Mayús+Intro) se mostrarán todos los archivos en el directorio de entrada

importación os
para dirname, _, nombres de archivo en os.walk('/kaggle/input'):
 para el nombre de archivo en los nombres de archivo:
        print(os.path.join(dirname, filename))

• Los resultados que escriba en el directorio actual se guardarán como salida.


train á pd.read_csv(".. /input/competitive-data-science-predict-future-sales/sales_train.csv")

train.head()

train.isnull().sum()

#scatter parcela
plt.scatter(train['shop_id'], train['item_cnt_day'], edgecolors'g')
plt.xlabel('shop_id')
plt.ylabel('item_cnt_day')
plt.title('shop_id vs item_cnt_day')

plt.scatter(train['item_id'], train['item_cnt_day'], edgecolors'r')
plt.xlabel('item_id')
plt.ylabel('item_cnt_day')
plt.title('item_id vs item_cnt_day')

#correlation
train.corr()
cor á train.iloc[:,0:3].corr()
print(cor)

tren, prueba train_test_split (tren, test_size a 0,3)
print(train.shape)
print(test.shape)

train_x train.iloc[:,0:3]; train_y train.iloc[:,3]
test_x test.iloc[:,0:3]; test_y test.iloc[:,3]
impresión(train_x)
impresión(test_x)

train.dtypes
print(train_x.shape)
print(train_y.shape)
print(test_x.shape)
print(test_y.shape)

train_x.head()
train_y.head()

train_x.tail()

train_y.tail()

train.head()

lm1 a sm. OLS(train_y, train_x).fit()
pdct1 á lm1.predict(test_x)
print(pdct1)

real: list(test_y.head(50))
tipo (real)
predicción: np.round(np.array(list(pdct1.head(50))),2)
print (predicho)
tipo (previsto)

df_results pd. DataFrame('real':real, 'predicted':predicted')
impresión (df_results)

de métricas de importación de sklearn 
print('Mean Absolute Error:', metrics.mean_absolute_error(test_y, pdct1))  
print('Mean Squared Error:', metrics.mean_squared_error(test_y, pdct1))  
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(test_y, pdct1))) 

Error absoluto medio: 0.548788992862524
Error al cuadrado medio: 13.746630620179447
Error al cuadrado medio de raíz: 3.7076448886293636
